diff -ur /agl/chromium/src/third_party/tlslite/tlslite/TLSConnection.py ./TLSConnection.py
--- /agl/chromium/src/third_party/tlslite/tlslite/TLSConnection.py	2011-11-18 16:15:00.707445214 -0500
+++ ./TLSConnection.py	2011-11-21 18:21:17.497513591 -0500
@@ -932,7 +932,7 @@
     def handshakeServer(self, sharedKeyDB=None, verifierDB=None,
                         certChain=None, privateKey=None, reqCert=False,
                         sessionCache=None, settings=None, checker=None,
-                        reqCAs=None):
+                        reqCAs=None, nextProtos=None):
         """Perform a handshake in the role of server.
 
         This function performs an SSL or TLS handshake.  Depending on
@@ -1012,14 +1012,14 @@
         """
         for result in self.handshakeServerAsync(sharedKeyDB, verifierDB,
                 certChain, privateKey, reqCert, sessionCache, settings,
-                checker, reqCAs):
+                checker, reqCAs, nextProtos):
             pass
 
 
     def handshakeServerAsync(self, sharedKeyDB=None, verifierDB=None,
                              certChain=None, privateKey=None, reqCert=False,
                              sessionCache=None, settings=None, checker=None,
-                             reqCAs=None):
+                             reqCAs=None, nextProtos=None):
         """Start a server handshake operation on the TLS connection.
 
         This function returns a generator which behaves similarly to
@@ -1036,14 +1036,14 @@
             verifierDB=verifierDB, certChain=certChain,
             privateKey=privateKey, reqCert=reqCert,
             sessionCache=sessionCache, settings=settings,
-            reqCAs=reqCAs)
+            reqCAs=reqCAs, nextProtos=nextProtos)
         for result in self._handshakeWrapperAsync(handshaker, checker):
             yield result
 
 
     def _handshakeServerAsyncHelper(self, sharedKeyDB, verifierDB,
                              certChain, privateKey, reqCert, sessionCache,
-                             settings, reqCAs):
+                             settings, reqCAs, nextProtos):
 
         self._handshakeStart(client=False)
 
@@ -1250,6 +1250,9 @@
         else:
             sessionID = createByteArraySequence([])
 
+        if not clientHello.supports_npn:
+            nextProtos = None
+
         #If we've selected an SRP suite, exchange keys and calculate
         #premaster secret:
         if cipherSuite in CipherSuite.srpSuites + CipherSuite.srpRsaSuites:
@@ -1346,6 +1349,7 @@
             serverHello = ServerHello()
             serverHello.create(self.version, serverRandom, sessionID,
                                cipherSuite, certificateType)
+            serverHello.next_protos_advertised = nextProtos
             msgs.append(serverHello)
             if cipherSuite in CipherSuite.srpRsaSuites:
                 certificateMsg = Certificate(certificateType)
@@ -1387,8 +1391,9 @@
             #Send ServerHello, Certificate[, CertificateRequest],
             #ServerHelloDone
             msgs = []
-            msgs.append(ServerHello().create(self.version, serverRandom,
-                        sessionID, cipherSuite, certificateType))
+            serverHello = ServerHello().create(self.version, serverRandom, sessionID, cipherSuite, certificateType)
+            serverHello.next_protos_advertised = nextProtos
+            msgs.append(serverHello)
             msgs.append(Certificate(certificateType).create(serverCertChain))
             if reqCert and reqCAs:
                 msgs.append(CertificateRequest().create([], reqCAs))
@@ -1516,7 +1521,7 @@
                                settings.cipherImplementations)
 
         #Exchange ChangeCipherSpec and Finished messages
-        for result in self._getFinished():
+        for result in self._getFinished(expect_next_protocol=nextProtos is not None):
             yield result
 
         #If we were holding a post-finished error until receiving the client
diff -ur /agl/chromium/src/third_party/tlslite/tlslite/TLSRecordLayer.py ./TLSRecordLayer.py
--- /agl/chromium/src/third_party/tlslite/tlslite/TLSRecordLayer.py	2011-11-18 16:15:00.707445214 -0500
+++ ./TLSRecordLayer.py	2011-11-21 18:20:17.637500621 -0500
@@ -714,6 +714,8 @@
                                             self.version).parse(p)
                 elif subType == HandshakeType.finished:
                     yield Finished(self.version).parse(p)
+                elif subType == HandshakeType.next_protocol:
+                    yield NextProtocol().parse(p)
                 else:
                     raise AssertionError()
 
@@ -1067,7 +1069,7 @@
         for result in self._sendMsg(finished):
             yield result
 
-    def _getFinished(self):
+    def _getFinished(self, expect_next_protocol=False):
         #Get and check ChangeCipherSpec
         for result in self._getMsg(ContentType.change_cipher_spec):
             if result in (0,1):
@@ -1082,6 +1084,19 @@
         #Switch to pending read state
         self._changeReadState()
 
+        if expect_next_protocol:
+            for result in self._getMsg(ContentType.handshake, HandshakeType.next_protocol):
+                if result in (0,1):
+                    yield result
+            if result is None:
+                for result in self._sendError(AlertDescription.unexpected_message,
+                                             "Didn't get NextProtocol message"):
+                    yield result
+
+            self.next_proto = result.next_proto
+        else:
+            self.next_proto = None
+
         #Calculate verification data
         verifyData = self._calcFinished(False)
diff -ur /agl/chromium/src/third_party/tlslite/tlslite/constants.py ./constants.py
--- /agl/chromium/src/third_party/tlslite/tlslite/constants.py	2011-11-18 16:15:00.707445214 -0500
+++ ./constants.py	2011-11-21 18:20:17.637500621 -0500
@@ -22,6 +22,7 @@
     certificate_verify = 15
     client_key_exchange = 16
     finished = 20
+    next_protocol = 67
 
 class ContentType:
     change_cipher_spec = 20
diff -ur /agl/chromium/src/third_party/tlslite/tlslite/messages.py ./messages.py
--- /agl/chromium/src/third_party/tlslite/tlslite/messages.py	2011-11-18 16:15:00.707445214 -0500
+++ ./messages.py	2011-11-21 18:27:29.447491888 -0500
@@ -130,9 +130,11 @@
         self.certificate_types = [CertificateType.x509]
         self.compression_methods = []   # a list of 8-bit values
         self.srp_username = None        # a string
+        self.supports_npn = False
 
     def create(self, version, random, session_id, cipher_suites,
-               certificate_types=None, srp_username=None):
+               certificate_types=None, srp_username=None,
+               supports_npn=False):
         self.client_version = version
         self.random = random
         self.session_id = session_id
@@ -174,6 +176,8 @@
                         self.srp_username = bytesToString(p.getVarBytes(1))
                     elif extType == 7:
                         self.certificate_types = p.getVarList(1, 1)
+                    elif extType == 13172:
+                        self.supports_npn = True
                     else:
                         p.getFixBytes(extLength)
                     soFar += 4 + extLength
@@ -210,6 +214,12 @@
 
         return HandshakeMsg.postWrite(self, w, trial)
 
+class BadNextProtos(Exception):
+    def __init__(self, l):
+        self.length = l
+
+    def __str__(self):
+        return 'Cannot encode a list of next protocols because it contains an element with invalid length %d. Element lengths must be 0 < x < 256' % self.length
 
 class ServerHello(HandshakeMsg):
     def __init__(self):
@@ -220,6 +230,7 @@
         self.cipher_suite = 0
         self.certificate_type = CertificateType.x509
         self.compression_method = 0
+        self.next_protos_advertised = None
 
     def create(self, version, random, session_id, cipher_suite,
                certificate_type):
@@ -252,6 +263,16 @@
         p.stopLengthCheck()
         return self
 
+    def __next_protos_encoded(self):
+        a = []
+        for e in self.next_protos_advertised:
+            if len(e) > 255 or len(e) == 0:
+                raise BadNextProtos(len(e))
+            a.append(chr(len(e)))
+            a.append(e)
+
+        return [ord(x) for x in ''.join(a)]
+
     def write(self, trial=False):
         w = HandshakeMsg.preWrite(self, HandshakeType.server_hello, trial)
         w.add(self.server_version[0], 1)
@@ -266,6 +287,12 @@
                 CertificateType.x509:
             extLength += 5
 
+        encoded_next_protos_advertised = None
+        if self.next_protos_advertised is not None:
+            encoded_next_protos_advertised = self.__next_protos_encoded()
+            extLength += 4 # type and length bytes
+            extLength += len(encoded_next_protos_advertised)
+
         if extLength != 0:
             w.add(extLength, 2)
 
@@ -275,6 +302,11 @@
             w.add(1, 2)
             w.add(self.certificate_type, 1)
 
+        if encoded_next_protos_advertised is not None:
+            w.add(13172, 2)
+            w.add(len(encoded_next_protos_advertised), 2)
+            w.addFixSeq(encoded_next_protos_advertised, 1)
+
         return HandshakeMsg.postWrite(self, w, trial)
 
 class Certificate(HandshakeMsg):
@@ -515,6 +547,7 @@
         return self
 
     def write(self, trial=False):
+        w.add(self.type,1)
         w = HandshakeMsg.preWrite(self, HandshakeType.certificate_verify,
                                   trial)
         w.addVarSeq(self.signature, 1, 2)
@@ -540,6 +573,26 @@
         w.add(self.type,1)
         return Msg.postWrite(self, w, trial)
 
+class NextProtocol(Msg):
+    def __init__(self):
+        self.contentType = ContentType.handshake
+        self.next_proto = None
+
+    def create(self, next_proto):
+        self.next_proto = next_proto
+
+    def parse(self, p):
+        p.startLengthCheck(3)
+        self.next_proto = p.getVarBytes(1)
+        _ = p.getVarBytes(1)
+        p.stopLengthCheck()
+        return self
+
+    def write(self, trial=False):
+        w = Msg.preWrite(self, HandshakeMsg.next_protocol, trial)
+        w.addVarSeq(self.next_proto, 1, 1)
+        w.addVarSeq('\x00' * 32, 1, 32 - ((len(self.next_proto) + 2) % 32));
+        return Msg.postWrite(self, w, trial)
 
 class Finished(HandshakeMsg):
     def __init__(self, version):
